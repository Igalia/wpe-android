plugins {
    id 'com.android.library'
}

android {
    namespace 'com.wpe.wpe'
    compileSdk 35
    ndkVersion '26.3.11579264'

    defaultConfig {
        minSdk 31
        targetSdk 35

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    lintOptions {
        disable 'ChromeOsAbiSupport'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            version '3.22.1'
            path file('src/main/cpp/CMakeLists.txt')
        }
    }

    // FIXME: There is no real fixed limitation on the number of services an app can spawn on
    //        Android or the number of auxiliary processes WebKit spawns. However we have a
    //        limitation imposed by the way Android requires Services to be defined in the
    //        AndroidManifest. We have to generate the manifest at build time adding an independent
    //        entry for each Service we expect to launch. This magic number is taken from GeckoView,
    //        which uses a similar approach.
    final NUMBER_OF_AUX_PROCESSES = 40
    buildFeatures {
        aidl true
    }

    libraryVariants.all { variant ->
        def genDir = new File(project.buildDir, "generated/source/services/${variant.name}")

        def wpeGenServicesTask = tasks.create("wpeGenServices${variant.name.capitalize()}").doLast({
            def templateFileContent = file("src/main/java/com/wpe/wpe/services/WPEServices.java.template").getText()
            def services = ""
            for (int i = 0; i < NUMBER_OF_AUX_PROCESSES; ++i) {
                services += "    public static final class WebProcessService$i extends WebProcessService {}\n" +
                    "    public static final class NetworkProcessService$i extends NetworkProcessService {}\n"
            }
            templateFileContent = templateFileContent.replace("    // SERVICES PLACEHOLDER", services)

            def servicesDir = new File(genDir, "com/wpe/wpe/services")
            servicesDir.mkdirs()
            new File(servicesDir, "WPEServices.java").write(templateFileContent)
        })
        wpeGenServicesTask.description = "Generate the code for multiple WPE auxiliary services"
        variant.registerJavaGeneratingTask(wpeGenServicesTask, genDir)

        variant.outputs.all { output ->
            def manifestProvider = output.getProcessManifestProvider().get()

            manifestProvider.doLast({
                def manifestFile = manifestProvider.manifestOutputFile.get().asFile
                def manifestContent = manifestFile.getText()
                def services = ""
                for (int i = 0; i < NUMBER_OF_AUX_PROCESSES; ++i) {
                    services += "        <service\n" +
                        "            android:name=\"com.wpe.wpe.services.WPEServices\$NetworkProcessService$i\"\n" +
                        "            android:process=\":WPENetworkProcess$i\"/>\n" +
                        "        <service\n" +
                        "            android:name=\"com.wpe.wpe.services.WPEServices\$WebProcessService$i\"\n" +
                        "            android:process=\":WPEWebProcess$i\"/>\n\n"
                }
                manifestContent = manifestContent.replace("        <!-- SERVICES PLACEHOLDER -->", services)
                manifestFile.write(manifestContent)
                logger.info(manifestContent)
            })
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.8.2'
    androidTestImplementation "androidx.test:runner:1.6.2"
    androidTestImplementation "androidx.test:rules:1.6.1"
    androidTestImplementation "androidx.test.ext:junit:1.2.1"
}

gradle.afterProject { project ->
    if (project == getProject()) {
        def abiList = []
        for (abi in ['x86_64', 'arm64-v8a']) {
            if (file("src/main/jniLibs/$abi").isDirectory())
                abiList.add(abi)
        }
        project.android.defaultConfig.ndk.abiFilters = abiList

        if (abiList.isEmpty()) {
            println("Cannot find ABI dependencies")
            println("Please call ./tools/scripts/bootstrap.py before build")
        } else {
            println("Detected ABI: $abiList")
            println("Use ./tools/scripts/bootstrap.py to install dependencies for more ABIs")
        }
    }
}
