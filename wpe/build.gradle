plugins {
    id 'com.android.library'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    splits {
        abi {
            enable true
            reset()
            include "arm64-v8a"
        }
    }

    def NUMBER_OF_AUX_PROCESSES = 40

    android.libraryVariants.all { variant ->
        variant.outputs.all { output ->
            output.processManifest.doLast {
                def manifestFile = file(output.processManifest.manifestOutputFile.get().asFile)
                def manifestContent = manifestFile.getText()
                def services = ""
                for (int i = 0; i < NUMBER_OF_AUX_PROCESSES; i++) {
                    services += "\t\t<service\n" +
                            "            android:name=\"com.wpe.wpe.services.WPEServices\$NetworkProcessService$i\"\n" +
                            "            android:process=\":WPENetworkProcess$i\"/>\n" +
                            "        <service\n" +
                            "            android:name=\"com.wpe.wpe.services.WPEServices\$WebProcessService$i\"\n" +
                            "            android:process=\":WPEWebProcess$i\"/>\n\n"
                }
                manifestContent = manifestContent.replace("<!-- SERVICES PLACEHOLDER -->", services)

                println(manifestContent)

                manifestFile.write(manifestContent)
            }
        }
    }

    android.libraryVariants.all { variant ->
        File srcdir = new File("${project.projectDir}")

        def wpeServicesTask = tasks.create("wpeservices${variant.name}").doLast({
            def templateFile = file("$srcdir/src/main/java/com/wpe/wpe/services/WPEServices.java.template")
            def templateFileContent = templateFile.getText()
            def services = ""
            for (int i = 0; i < NUMBER_OF_AUX_PROCESSES; i++) {
                services += "\tpublic static final class WebProcessService$i extends WebProcessService {}\n" +
                        "\tpublic static final class NetworkProcessService$i extends NetworkProcessService {}\n"
            }
            templateFileContent = templateFileContent.replace("// SERVICES PLACEHOLDER", services)

            def servicesFile = file("$srcdir/src/main/java/com/wpe/wpe/services/WPEServices.java")
            servicesFile.write(templateFileContent)
        })
        wpeServicesTask.description = "Generate the code for multiple WPE auxiliary services"
        variant.registerJavaGeneratingTask wpeServicesTask, srcdir
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation "androidx.annotation:annotation:1.1.0"
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}
