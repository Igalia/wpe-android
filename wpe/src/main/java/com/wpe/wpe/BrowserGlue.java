/**
 * Copyright (C) 2022 Igalia S.L. <info@igalia.com>
 *   Author: Fernando Jimenez Moreno <fjimenez@igalia.com>
 *   Author: Zan Dobersek <zdobersek@igalia.com>
 *   Author: Jani Hautakangas <jani@igalia.com>
 *   Author: Lo√Øc Le Page <llepage@igalia.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

package com.wpe.wpe;

import android.util.Log;
import android.view.Surface;

import androidx.annotation.Keep;
import androidx.annotation.NonNull;
import androidx.annotation.UiThread;
import androidx.annotation.WorkerThread;

@UiThread
public class BrowserGlue {
    private static final String LOGTAG = "BrowserGlue";

    static {
        System.loadLibrary("WPEBackend-default");
        System.loadLibrary("WPEBrowserGlue");
    }

    private final Browser browser;

    public BrowserGlue(@NonNull Browser browser) { this.browser = browser; }

    public static native void setupEnvironment(String[] envStringsArray);
    public static native void init(BrowserGlue self);
    public static native void initLooperHelper();
    public static native void shut();

    /**
     * This method is called directly from WebKit when a new auxiliary process needs to be created.
     * Given that Android forbids the fork syscall on non-rooted devices, we spawn Services to
     * host the logic of WebKit auxiliary processes.
     *
     * @param pid The process identifier. This value is generated by WebKit and does not correspond with
     * the actual system pid.
     * @param processType The type of service to launch. It can be a Web (0) or a Network (1) process.
     * @param fd File descriptor used by WebKit for IPC.
     */
    @Keep
    @WorkerThread
    public void launchProcess(long pid, int processType, int fd) {
        Log.d(LOGTAG, "launchProcess " + pid);
        browser.launchAuxiliaryProcess(pid, ProcessType.fromValue(processType), fd);
    }

    /**
     * Terminate the Service hosting the logic for a WebKit auxiliary process that matches the given pid
     *
     * @param pid The process identifier. This value is generated by WebKit and does not correspond with
     * the actual system pid.
     */
    @Keep
    @WorkerThread
    public void terminateProcess(long pid) {
        Log.d(LOGTAG, "terminateProcess " + pid);
        browser.terminateAuxiliaryProcess(pid);
    }

    @Keep
    public void loadProgress(double progress) {
        Log.d(LOGTAG, "progress " + progress);
    }
}
