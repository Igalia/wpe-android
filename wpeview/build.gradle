import com.vanniktech.maven.publish.AndroidSingleVariantLibrary
import com.vanniktech.maven.publish.SonatypeHost

plugins {
    alias libs.plugins.android.library
    alias libs.plugins.vanniktech.maven.publish
}

android {
    namespace = "org.wpewebkit"
    compileSdk = libs.versions.target.android.sdk.get().toInteger()
    ndkVersion = libs.versions.android.ndk.get()
    buildToolsVersion = libs.versions.android.sdk.build.tools.get()

    defaultConfig {
        minSdk = libs.versions.min.android.sdk.get().toInteger()
        targetSdk = libs.versions.target.android.sdk.get().toInteger()

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt")
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    buildFeatures {
        aidl = true
    }

    externalNativeBuild {
        cmake {
            version = libs.versions.cmake.get()
            path file("src/main/cpp/CMakeLists.txt")
        }
    }

    // FIXME: There is no real fixed limitation on the number of services an app can spawn on
    //        Android or the number of auxiliary processes WebKit spawns. However we have a
    //        limitation imposed by the way Android requires Services to be defined in the
    //        AndroidManifest. We have to generate the manifest at build time adding an independent
    //        entry for each Service we expect to launch. This magic number is taken from GeckoView,
    //        which uses a similar approach.
    final NUMBER_OF_AUX_PROCESSES = 40

    libraryVariants.configureEach { variant ->
        def genDir = project.layout.buildDirectory.dir("generated/source/services/${variant.name}").get().asFile

        def wpeGenServicesTask = tasks.register("wpeGenServices${variant.name.capitalize()}") {
            description = "Generate the code for multiple WPE auxiliary services"
            doLast {
                def templateFileContent = file("src/main/java/org/wpewebkit/wpe/services/WPEServices.java.template").getText()
                def services = ""
                for (int i = 0; i < NUMBER_OF_AUX_PROCESSES; ++i) {
                    services += "    public static final class WebProcessService$i extends WebProcessService {}\n" +
                        "    public static final class NetworkProcessService$i extends NetworkProcessService {}\n"
                }
                templateFileContent = templateFileContent.replace("    // SERVICES PLACEHOLDER", services)

                def servicesDir = new File(genDir, "org/wpewebkit/wpe/services")
                servicesDir.mkdirs()
                new File(servicesDir, "WPEServices.java").write(templateFileContent)
            }
        }
        variant.registerJavaGeneratingTask(wpeGenServicesTask, genDir)

        variant.outputs.all { output ->
            def manifestProvider = output.getProcessManifestProvider().get()

            manifestProvider.doLast({
                def manifestFile = manifestProvider.manifestOutputFile.get().asFile
                def manifestContent = manifestFile.getText()
                def services = ""
                for (int i = 0; i < NUMBER_OF_AUX_PROCESSES; ++i) {
                    services += "        <service\n" +
                        "            android:name=\"org.wpewebkit.wpe.services.WPEServices\$NetworkProcessService$i\"\n" +
                        "            android:process=\":WPENetworkProcess$i\"/>\n" +
                        "        <service\n" +
                        "            android:name=\"org.wpewebkit.wpe.services.WPEServices\$WebProcessService$i\"\n" +
                        "            android:process=\":WPEWebProcess$i\"/>\n\n"
                }
                manifestContent = manifestContent.replace("        <!-- SERVICES PLACEHOLDER -->", services)
                manifestFile.write(manifestContent)
            })
        }
    }
}

dependencies {
    implementation libs.androidx.annotation

    androidTestImplementation libs.androidx.test.runner
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.junit
}

mavenPublishing {
    configure(new AndroidSingleVariantLibrary("release", true, true))

    coordinates("org.wpewebkit.wpeview", "wpeview", libs.versions.wpeview.get())

    pom {
        name = "WPEView"
        description = "WPE WebKit for Android"
        url = "https://github.com/Igalia/wpe-android"

        licenses {
            license {
                name = "GNU Lesser General Public License v2.1"
                url = "https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt"
                distribution = "repo"
            }
        }

        developers {
            developer {
                id = "igalia"
                name = "Igalia"
                url = "https://github.com/Igalia"
            }
        }

        scm {
            connection = "scm:git@github.com/Igalia/wpe-android.git"
            url = "https://github.com/Igalia/wpe-android.git"
        }
    }

    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    // Enable GPG signing for all publications
    signAllPublications()
}

gradle.afterProject { project ->
    if (project == getProject()) {
        def abiList = []
        for (abi in ["x86_64", "arm64-v8a"]) {
            if (file("src/main/jniLibs/$abi").isDirectory())
                abiList.add(abi)
        }
        project.android.defaultConfig.ndk.abiFilters = abiList

        if (abiList.isEmpty()) {
            println("Cannot find ABI dependencies")
            println("Please call ./tools/scripts/bootstrap.py before build")
        } else {
            println("Detected ABI: $abiList")
            println("Use ./tools/scripts/bootstrap.py to install dependencies for more ABIs")
        }
    }
}
